//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

enum NotificationType {
  AddedToCourseNotification
  AddedToGroupNotification
}

enum TaskType {
  AgreeTask
  SelectOneTask
  SelectManyTask
  FillGapsTask
  ReplyTask
}

enum AnswerType {
  AgreeAnswer
  SelectOneAnswer
  SelectManyAnswer
  FillGapsAnswer
  ReplyAnswer
}

model User {
  id                    Int            @id() @default(autoincrement())
  createdAt             DateTime       @default(now())
  login                 String         @unique()
  password              String
  name                  String
  surname               String
  middlename            String?
  email                 String         @unique()
  confirmed             Boolean        @default(false)
  admin                 Boolean        @default(false)
  tutor                 Boolean        @default(false)
  createdCourses        Course[]       @relation("created-courses")
  createdGroups         Group[]        @relation("created-groups")
  participatedGroups    Group[]        @relation("participated-groups")
  participatedCourses   Course[]       @relation("participated-courses")
  createdTasks          Task[]         @relation("created-tasks")
  sentNotifications     Notification[] @relation("user-notification-sent")
  receivedNotifications Notification[] @relation("user-notification-received")
  attempts              Attempt[]
}

/// @@delegate(type)
model Notification {
  id                                     Int                        @id() @default(autoincrement())
  createdAt                              DateTime                   @default(now())
  type                                   NotificationType
  senderId                               Int
  sender                                 User                       @relation("user-notification-sent", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId                             Int
  receiver                               User                       @relation("user-notification-received", fields: [receiverId], references: [id], onDelete: Cascade)
  delegate_aux_addedToGroupNotification  AddedToGroupNotification?
  delegate_aux_addedToCourseNotification AddedToCourseNotification?
}

model AddedToGroupNotification {
  id                        Int          @id()
  groupId                   Int          @unique()
  group                     Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  delegate_aux_notification Notification @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AddedToCourseNotification {
  id                        Int          @id()
  courseId                  Int          @unique()
  course                    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  delegate_aux_notification Notification @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Group {
  id                   Int                        @id() @default(autoincrement())
  title                String
  createdAt            DateTime                   @default(now())
  tutorId              Int
  tutor                User                       @relation("created-groups", fields: [tutorId], references: [id], onDelete: Cascade)
  students             User[]                     @relation("participated-groups")
  participatedCourses  Course[]
  addedToNotifications AddedToGroupNotification[]
}

model Course {
  id                   Int                         @id() @default(autoincrement())
  createdAt            DateTime                    @default(now())
  title                String
  description          String?
  tutorId              Int
  tutor                User                        @relation("created-courses", fields: [tutorId], references: [id], onDelete: Cascade)
  groups               Group[]
  works                Work[]                      @relation("courses-works")
  students             User[]                      @relation("participated-courses")
  addedToNotifications AddedToCourseNotification[]
  worksStates          WorkState[]
  attempts             Attempt[]
}

model Work {
  id          Int         @id() @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime    @default(now())
  inCourses   Course[]    @relation("courses-works")
  tasks       Task[]      @relation("works-tasks")
  attempts    Attempt[]
  states      WorkState[]
  tasksStates TaskState[]
}

model WorkState {
  enabledUntil DateTime?
  workId       Int
  work         Work      @relation(fields: [workId], references: [id], onDelete: Cascade)
  courseId     Int
  inCourse     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([workId, courseId])
}

/// @@delegate(type)
model Task {
  id                          Int             @id() @default(autoincrement())
  createdAt                   DateTime        @default(now())
  title                       String
  description                 String?
  type                        TaskType
  tutorId                     Int
  tutor                       User            @relation("created-tasks", fields: [tutorId], references: [id], onDelete: Cascade)
  inWorks                     Work[]          @relation("works-tasks")
  states                      TaskState[]
  delegate_aux_agreeTask      AgreeTask?
  delegate_aux_selectOneTask  SelectOneTask?
  delegate_aux_selectManyTask SelectManyTask?
  delegate_aux_fillGapsTask   FillGapsTask?
  delegate_aux_replyTask      ReplyTask?
}

model TaskState {
  disabled Boolean?
  taskId   Int
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  workId   Int
  inWork   Work     @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@id([taskId, workId])
}

model AgreeTask {
  id                Int     @id()
  correctAnswer     Boolean
  delegate_aux_task Task    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SelectOneTask {
  id                Int      @id()
  options           String[]
  correctAnswer     Int
  delegate_aux_task Task     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SelectManyTask {
  id                Int      @id()
  options           String[]
  correctAnswer     Int[]
  delegate_aux_task Task     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FillGapsTask {
  id                Int  @id()
  document          Json
  delegate_aux_task Task @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ReplyTask {
  id                Int  @id()
  delegate_aux_task Task @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Attempt {
  createdAt DateTime @default(now())
  studentId Int
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  workId    Int
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([studentId, workId, courseId])
}

/// @@delegate(type)
model Answer {
  id                            Int               @id() @default(autoincrement())
  type                          AnswerType
  delegate_aux_agreeAnswer      AgreeAnswer?
  delegate_aux_selectOneAnswer  SelectOneAnswer?
  delegate_aux_selectManyAnswer SelectManyAnswer?
  delegate_aux_fillGapsAnswer   FillGapsAnswer?
  delegate_aux_replyAnswer      ReplyAnswer?
}

model AgreeAnswer {
  id                  Int      @id()
  answer              Boolean?
  delegate_aux_answer Answer   @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SelectOneAnswer {
  id                  Int    @id()
  answer              Int?
  delegate_aux_answer Answer @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SelectManyAnswer {
  id                  Int    @id()
  answer              Int[]
  delegate_aux_answer Answer @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FillGapsAnswer {
  id                  Int    @id()
  answer              Int[]
  delegate_aux_answer Answer @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ReplyAnswer {
  id                  Int    @id()
  answer              Json
  delegate_aux_answer Answer @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
